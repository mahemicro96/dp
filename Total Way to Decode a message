recursive:(doubt)
int decode(string message)
	{
		
		int msgLen = message.size();
		if(msgLen == 0 || msgLen == 1)
			return 1;
		
		int count = 0;
		
		if(message[(msgLen - 1 ) ]> '0')//last digit
			count = decode(message.substr(0, msgLen - 1));//trimmed message by decreasing length by 1
		
		
		if((message.[(msgLen - 2)] < '2') || ( message.[(msgLen - 2)] == '2' &&  message[(msgLen - 1) < '7' ] )
			count += decode(message.substr(0, msgLen - 2));
		
		return count;
	}



----------------------
#include <iostream>
using namespace std;

int totalWay(string s, int n)
{
    int dp[n+1];
    dp[0] = 1;
    if(s[0] == '0') {
        return 0;
    }
    dp[1] = s[0]=='0'?0:1;
    for(int i = 2; i <= n; i++) {
        int c1 = 0; 
        int c2 = 0;
        if(s[i-1] > '0') {
            c1 = dp[i-1];
        }
        if(s[i-2] == '1' || s[i-2] == '2' && s[i-1] < '7') {
            c2 = dp[i-2];
        }
        dp[i] = c1 + c2;
    }
    
    return dp[n];
    
}

int main() {
    
    int n;
    cin >> n;
    string s;
    cin >> s;
    
    cout << totalWay(s, n) << endl;

	return 0;
}

/*

INPUT:
4
1234

OUTPUT:
3
*/
